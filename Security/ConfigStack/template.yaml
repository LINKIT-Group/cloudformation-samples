AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: CloudFormation Configuration Stack
# Parameters:
# NOTE: initial testing version -- not yet suitable for production
# TODOs: 
# - principal currently set to OrganizationAccountAccessRole
#   should be changed by supplying CommaDelimitedList of principals
# - AllowedRoles -> allows to change to any role for testing purposes
#   should be limited via configuration
#   likely need to expand the boundary with some additional default permissions
# - BucketEmptyLambda should be exported to its own source file
Resources:

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
        - ExpirationInDays: 30
          Status: Disabled
        - NoncurrentVersionExpirationInDays: 7
          Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256

  BucketEmptyLambda:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: index.handler
      Policies:
      - Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
            - s3:List*
            - s3:DeleteObject
            - s3:DeleteObjectVersion
            Resource:
            - !Sub ${Bucket.Arn}
            - !Sub ${Bucket.Arn}/*
      InlineCode: |
          import boto3
          import cfnresponse
          s3 = boto3.resource('s3')

          def empty_s3(payload):
              bucket = s3.Bucket(payload['BucketName'])
              bucket.object_versions.all().delete()
              return {}

          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      # do nothing
                      cfnresponse.send(event, context, cfnresponse.SUCCESS,
                                       {}, event['LogicalResourceId'])
                  elif event['RequestType'] in ['Delete']:
                      response = empty_s3(event['ResourceProperties'])
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response)

              except Exception as e:
                  cfnresponse.send(event, context, "FAILED", {"Message": str(e)})
  CustomCrlBucketEmpty:
    Type: Custom::CrlBucketEmpty
    Properties:
      ServiceToken: !GetAtt BucketEmptyLambda.Arn
      BucketName: !Ref Bucket



  # Access Boundary for Deployed Resources
  AllowedRolesPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Resource: '*'

  RunCloudFormationRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS:
            - !Sub arn:aws:iam::${AWS::AccountId}:role/OrganizationAccountAccessRole
          Action:
          - sts:AssumeRole
      Description: Allow to manage stacks via CloudFormation
      MaxSessionDuration: 7200
      Tags:
      - Key: _USE_CONFIGSTACK
        Value: !Ref AWS::StackName
      Policies: 
      - PolicyName: RunCloudFormation
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudformation:CancelUpdateStack
            - cloudformation:CreateStack
            - cloudformation:DescribeStackInstance
            - cloudformation:DeleteStack
            - cloudformation:TagResource
            - cloudformation:UpdateStack
            - cloudformation:CreateChangeSet
            - cloudformation:UntagResource
            - cloudformation:DescribeChangeSet
            - cloudformation:ExecuteChangeSet
            - cloudformation:GetTemplateSummary
            - cloudformation:DescribeStacks
            Resource:
            - arn:aws:cloudformation:*:*:stack/*/*
            - arn:aws:cloudformation:*:aws:transform/*
          - Effect: Allow
            Action:
            - cloudformation:ListStacks
            Resource: '*'
          - Effect: Allow
            Action: iam:PassRole
            Resource: !GetAtt CloudFormationStackRole.Arn

  ResourceDeployPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: resource_deploy_policy.yaml

  IamWithBoundary:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: 
          - iam:CreateRole
          - iam:UpdateRole
          - iam:AttachRolePolicy
          - iam:PutRolePolicy
          - iam:PutRolePermissionsBoundary
          - iam:DeleteRolePermissionsBoundary
          - iam:DeleteRolePolicy
          - iam:DetachRolePolicy
          Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/*
          Condition:
            StringEquals:
              iam:PermissionsBoundary: !Ref AllowedRolesPolicy

  # role used to deploy resources via CloudFormation
  CloudFormationStackRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: cloudformation.amazonaws.com
          Action:
          - sts:AssumeRole
      Description: CloudFormation Deploy Role
      MaxSessionDuration: 3600
      ManagedPolicyArns:
      # allow to add roles with equal (or less) policy attached
      - !Ref ResourceDeployPolicy
      - !Ref IamWithBoundary

Outputs:
  RunCloudFormationRole:
    Value: !GetAtt RunCloudFormationRole.Arn
  CloudFormationStackRole:
    Value: !GetAtt CloudFormationStackRole.Arn
  AllowedRolesPolicy:
    Value: !Ref AllowedRolesPolicy
  ArtifactBucket:
    Value: !Ref Bucket
